{"version":3,"sources":["../../src/utils/network.js"],"names":["connectionActions","messageActions","networkManager","init","store","client","url","dispatch","attempted","then","bindActionEvents","established","subscribe","getState","connection","listening","onmessage","messageReceiveHandler","bind","message","messageReceive","messageSendHandler","payload","detail","send","JSON","stringify","window","addEventListener"],"mappings":";;;;;;AACA;;AAEA;;IAAYA,iB;;AACZ;;IAAYC,c;;;;AAEZ,IAAMC,iBAAiB;AACnBC,QADmB,sBACU;AAAA;;AAAA,YAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,YAAfC,MAAe,QAAfA,MAAe;AAAA,YAAPC,GAAO,QAAPA,GAAO;;AACzB,aAAKC,QAAL,GAAgBH,MAAMG,QAAtB;AACA,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKE,QAAL,CAAcP,kBAAkBQ,SAAlB,EAAd;AACAH,eAAOF,IAAP,CAAYG,GAAZ,EAAiBG,IAAjB,CAAsB,aAAK;AACvB,kBAAKC,gBAAL;AACA,kBAAKH,QAAL,CAAcP,kBAAkBW,WAAlB,EAAd;AACH,SAHD;AAIAP,cAAMQ,SAAN,CAAgB,YAAM;AAClB,gBAAIR,MAAMS,QAAN,GAAiBC,UAAjB,CAA4BH,WAA5B,IAA2C,CAACP,MAAMS,QAAN,GAAiBC,UAAjB,CAA4BC,SAA5E,EAAuF;AACnFV,uBAAOW,SAAP,CAAiB,MAAKC,qBAAL,CAA2BC,IAA3B,OAAjB;AACAd,sBAAMG,QAAN,CAAeP,kBAAkBe,SAAlB,EAAf;AACH;AACJ,SALD;AAMH,KAfkB;AAiBnBE,yBAjBmB,iCAiBGE,OAjBH,EAiBY;AAC3B,aAAKZ,QAAL,CAAcN,eAAemB,cAAf,CAA8BD,OAA9B,CAAd;AACH,KAnBkB;AAqBnBE,sBArBmB,qCAqByB;AAAA,YAAbC,OAAa,SAAvBC,MAAuB,CAAbD,OAAa;;AACxC,aAAKjB,MAAL,CAAYmB,IAAZ,CAAiBC,KAAKC,SAAL,CAAeJ,OAAf,CAAjB;AACH,KAvBkB;AAyBnBZ,oBAzBmB,8BAyBA;AACfiB,eAAOC,gBAAP,qCAA+C,KAAKP,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,CAA/C;AACH;AA3BkB,CAAvB,C,CANA;kBAoCehB,c","file":"network.js","sourcesContent":["// @ts-check\nimport { MESSAGE_ADD, MESSAGE_SEND } from '../actionTypes';\n\nimport * as connectionActions from '../actions/connection';\nimport * as messageActions from '../actions/messages';\n\nconst networkManager = {\n    init({ store, client, url }) {\n        this.dispatch = store.dispatch;\n        this.client = client;\n        this.dispatch(connectionActions.attempted());\n        client.init(url).then(_ => {\n            this.bindActionEvents();\n            this.dispatch(connectionActions.established());\n        });\n        store.subscribe(() => {\n            if (store.getState().connection.established && !store.getState().connection.listening) {\n                client.onmessage(this.messageReceiveHandler.bind(this));\n                store.dispatch(connectionActions.listening());\n            }\n        });\n    },\n\n    messageReceiveHandler(message) {\n        this.dispatch(messageActions.messageReceive(message));\n    },\n\n    messageSendHandler({ detail: { payload } }) {\n        this.client.send(JSON.stringify(payload));\n    },\n\n    bindActionEvents() {\n        window.addEventListener(`rwc-${MESSAGE_SEND}`, this.messageSendHandler.bind(this));\n    }\n};\n\nexport default networkManager;\n"]}